import json
from aiogram import Bot, Dispatcher, executor, types
from bot.config import BOT_TOKEN
import datetime
import os
from utils.logger import logger, log_errors
from utils.app_manager import AppManager

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
app_manager = AppManager(os.path.join(os.path.dirname(__file__), "apps_data"))

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
tokens = {
    "abc123": "user1",
    "def456": "user2"
}

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}

@dp.message_handler(commands=["start"])
@log_errors
async def start(message: types.Message):
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ /login {token} –¥–ª—è –≤—Ö–æ–¥–∞.")

@dp.message_handler(commands=["login"])
@log_errors
async def login(message: types.Message):
    logger.info(f"User {message.from_user.id} attempting to login")
    parts = message.text.strip().split()
    
    if len(parts) != 2:
        logger.warning(f"User {message.from_user.id} used incorrect login format")
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /login {token}")
        return

    token_value = parts[1]
    if token_value not in tokens:
        logger.warning(f"User {message.from_user.id} tried invalid token")
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return

    telegram_id = str(message.from_user.id)
    active_users[telegram_id] = True
    logger.info(f"User {message.from_user.id} successfully logged in")

    # –ü–æ–∫–∞–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    keyboard = types.InlineKeyboardMarkup()
    user_role = tokens[token_value]
    user_apps = app_manager.get_apps_for_user(user_role)
    
    for app in user_apps:
        keyboard.add(types.InlineKeyboardButton(f"{app['name']}", callback_data=f"app_{app['id']}"))
    await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("app_"))
@log_errors
async def show_app(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    if telegram_id not in active_users:
        logger.warning(f"User {telegram_id} tried to access app without login")
        await call.message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login.")
        return

    try:
        app_id = call.data.split("_")[1]
        user_role = tokens[active_users[telegram_id]]
    except (ValueError, IndexError):
        logger.error(f"Invalid app callback data: {call.data}")
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    app = app_manager.get_app(app_id)
    if not app:
        logger.warning(f"User {telegram_id} tried to access non-existent app {app_id}")
        await call.message.answer("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ Google Play –∏ –ê—Ä–µ–Ω–¥—ã
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("Google Play", url=app['package_url']),
        types.InlineKeyboardButton("–ê—Ä–µ–Ω–¥–∞", callback_data=f"rent_{app_id}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    features = "\n‚Ä¢ ".join(app.get("features", []))
    message = f"<b>{app['name']}</b>\n\n"
    message += f"<i>{app['description']}</i>\n\n"
    message += f"<b>–§—É–Ω–∫—Ü–∏–∏:</b>\n‚Ä¢ {features}"

    logger.info(f"User {telegram_id} viewing app {app['name']}")
    await call.message.answer_photo(
        photo=app['icon_url'],
        caption=message,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("rent_"))
@log_errors
async def handle_rent(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    app_id = call.data.split("_")[1]
    app = app_manager.get_app(app_id)
    
    if app:
        await call.message.answer(
            "–î–ª—è –∞—Ä–µ–Ω–¥—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @kotlincaptain"
        )
    else:
        logger.warning(f"User {telegram_id} tried to rent non-existent app {app_id}")
        await call.message.answer("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(commands=["apps"])
async def apps(message: types.Message):
    user = active_users.get(message.from_user.id)
    if not user:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login.")
        return

    apps = DATA["apps"].get(user, [])
    if not apps:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
        return

    for app in apps:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("Mini App üåê", url=app["mini_app"]))
        kb.add(types.InlineKeyboardButton("–ö–æ–Ω—Ñ–∏–≥ üìÑ", url=app["url"]))
        await message.reply(f"üì± <b>{app['name']}</b>", reply_markup=kb, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == "back")
async def go_back(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    keyboard = types.InlineKeyboardMarkup()
    for app in apps:
        keyboard.add(types.InlineKeyboardButton(f"{app['emoji']} {app['name']}", callback_data=f"app_{app['id']}"))
    await call.message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:", reply_markup=keyboard)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
