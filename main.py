import json
from aiogram import Bot, Dispatcher, executor, types
from bot.config import BOT_TOKEN
import os
from utils.logger import logger, log_errors

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ site/tokens.json
TOKENS_PATH = os.path.join(os.path.dirname(__file__), 'site', 'tokens.json')
def load_tokens():
    with open(TOKENS_PATH, encoding='utf-8') as f:
        data = json.load(f)
    return set(data.get('tokens', []))

tokens_set = load_tokens()
active_users = set()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ site/apps/*.json
APPS_DIR = os.path.join(os.path.dirname(__file__), 'site', 'apps')
def load_apps():
    apps = []
    for fname in os.listdir(APPS_DIR):
        if fname.endswith('.json'):
            with open(os.path.join(APPS_DIR, fname), encoding='utf-8') as f:
                app = json.load(f)
                app['id'] = fname[:-5]
                apps.append(app)
    return apps

def get_support_url(app):
    # –ï—Å–ª–∏ –≤ app –µ—Å—Ç—å –ø–æ–ª–µ support_url ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ, –∏–Ω–∞—á–µ rent_url, –∏–Ω–∞—á–µ t.me/kotlincaptain
    return app.get('support_url') or app.get('rent_url') or 'https://t.me/kotlincaptain'

@dp.message_handler(commands=["start"])
@log_errors
async def start(message: types.Message):
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –≤–≤–µ–¥–∏—Ç–µ /login {—Ç–æ–∫–µ–Ω}, –≥–¥–µ —Ç–æ–∫–µ–Ω ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –≤–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /apps –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π."
    )

@dp.message_handler(commands=["login"])
@log_errors
async def login(message: types.Message):
    logger.info(f"User {message.from_user.id} attempting to login")
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /login {—Ç–æ–∫–µ–Ω}")
        return
    token = parts[1]
    if token not in tokens_set:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    active_users.add(message.from_user.id)
    await message.reply("–£—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /apps –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")

@dp.callback_query_handler(lambda c: c.data.startswith("rent_"))
@log_errors
async def handle_rent(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    app_id = call.data.split("_")[1]
    app = app_manager.get_app(app_id)
    
    if app:
        await call.message.answer(
            "–î–ª—è –∞—Ä–µ–Ω–¥—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @kotlincaptain"
        )
    else:
        logger.warning(f"User {telegram_id} tried to rent non-existent app {app_id}")
        await call.message.answer("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(commands=["apps"])
@log_errors
async def apps(message: types.Message):
    if message.from_user.id not in active_users:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /login.")
        return
    app_list = load_apps()
    if not app_list:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
        return
    for app in app_list:
        kb = types.InlineKeyboardMarkup(row_width=2)
        kb.add(
            types.InlineKeyboardButton("–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å ü§ù", url=app.get('rent_url', 'https://t.me/kotlincaptain')),
            types.InlineKeyboardButton("–°–∞–ø–ø–æ—Ä—Ç üõ†", url=get_support_url(app))
        )
        msg = f"<b>{app.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        msg += f"<a href='{app.get('package_url', '#')}' target='_blank'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a>"
        await message.reply(msg, reply_markup=kb, parse_mode="HTML")

@dp.callback_query_handler(lambda c: c.data == "back")
async def go_back(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    keyboard = types.InlineKeyboardMarkup()
    for app in apps:
        keyboard.add(types.InlineKeyboardButton(f"{app['emoji']} {app['name']}", callback_data=f"app_{app['id']}"))
    await call.message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:", reply_markup=keyboard)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
